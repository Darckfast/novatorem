[{"/home/costa/Projetos/novatorem/src/index.tsx":"1","/home/costa/Projetos/novatorem/src/styles/pages/Spotify.ts":"2","/home/costa/Projetos/novatorem/src/components/spotify.tsx":"3","/home/costa/Projetos/novatorem/src/styles/theme.ts":"4","/home/costa/Projetos/novatorem/src/styles/global.ts":"5","/home/costa/Projetos/novatorem/src/hooks/useFetch.ts":"6"},{"size":720,"mtime":1608252777180,"results":"7","hashOfConfig":"8"},{"size":2228,"mtime":1608252640630,"results":"9","hashOfConfig":"8"},{"size":973,"mtime":1608253241780,"results":"10","hashOfConfig":"8"},{"size":851,"mtime":1608253214780,"results":"11","hashOfConfig":"8"},{"size":320,"mtime":1608153579350,"results":"12","hashOfConfig":"8"},{"size":293,"mtime":1608203781814,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bzjyrt",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},"/home/costa/Projetos/novatorem/src/index.tsx",[],"/home/costa/Projetos/novatorem/src/styles/pages/Spotify.ts",[],"/home/costa/Projetos/novatorem/src/components/spotify.tsx",[],"/home/costa/Projetos/novatorem/src/styles/theme.ts",[],"/home/costa/Projetos/novatorem/src/styles/global.ts",[],[],"/home/costa/Projetos/novatorem/src/hooks/useFetch.ts",["29","30"],"import useSWR from 'swr'\n\nexport function useFetch<Data = any>(url: string): { data: any; error: Error } {\n  const { data, error } = useSWR<Data>(url, async url => {\n    const response = await fetch(url)\n    const data = await response.json()\n\n    return data\n  })\n\n  return { data, error }\n}\n",[],{"ruleId":"31","severity":1,"message":"32","line":3,"column":33,"nodeType":"33","messageId":"34","endLine":3,"endColumn":36,"suggestions":"35"},{"ruleId":"31","severity":1,"message":"32","line":3,"column":60,"nodeType":"33","messageId":"34","endLine":3,"endColumn":63,"suggestions":"36"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["37","38"],["39","40"],{"messageId":"41","fix":"42","desc":"43"},{"messageId":"44","fix":"45","desc":"46"},{"messageId":"41","fix":"47","desc":"43"},{"messageId":"44","fix":"48","desc":"46"},"suggestUnknown",{"range":"49","text":"50"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"49","text":"51"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"52","text":"50"},{"range":"52","text":"51"},[58,61],"unknown","never",[85,88]]